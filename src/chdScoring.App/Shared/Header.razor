@using System.Globalization
@inject ISettingManager clientSettingManager
@inject IchdScoringProfileService profileService
@inject ITimeoutHandler timeoutHandler
@inject IJudgeHubClient apiClient
@inject IBaseUIComponentHandler uiHandler
@inherits LayoutComponentBase

<div class="header-panel">
    <HeaderBase TUserId="int" TRightId="int" PageTitle="@this.PageTitle" ShowVersion="false" ShowDateInfo="false">
        <RightChildContent>
            <div class="networkBox">
                <div class="liquid @GetStateCss()"></div>
            </div>
            <div class="theme-mode">
                <IconButton FAClass="@_themeModeIcon" OnClick="async ()=>await this.ChangeTheme()" />
            </div>
        </RightChildContent>
    </HeaderBase>
</div>

@code {
    [Parameter] public string PageTitle { get; set; }

    private string _themeModeIcon;

    protected override async Task OnInitializedAsync()
    {
        this._themeModeIcon = uiHandler.IsDarkMode ? "sun-bright" : "moon";
        this.StartRefresh();
        await base.OnInitializedAsync();
    }

    private async Task ChangeTheme()
    {
        var darkMode = this.uiHandler.IsDarkMode;
        await this.uiHandler.SetDarkMode(!darkMode);
        this._themeModeIcon = darkMode ? "moon" : "sun-bright";
        // await this.InvokeAsync(this.StateHasChanged);
    }

    private void StartRefresh() => Task.Run(async () =>
      {
          while (true)
          {
              var user = this.profileService.User;
              if (user != null && user.LogOffTimer.HasValue)
              {
                  this.timeoutHandler.CalculateDifferences(user.LogOffTimer);
              }

              await this.InvokeAsync(StateHasChanged);
              await Task.Delay(TimeSpan.FromSeconds(5));
          }
      });

    private string GetStateCss() => apiClient?.IsConnected ?? false ? "online" : "offline";
}
