@page "/uix"
@inherits PageComponentBase<int,int>
@implements IDisposable
@using Blazored.Modal.Services
@using chd.UI.Base.Client.Implementations.Authorization
@using chd.UI.Base.Client.Implementations.Services
@inject INotificationManagerService notificationService
@inject IModalService modal
@inject IBatteryService battery

@attribute [chdAuthorize<int>(Rights = new int[] { RightConstants.UIX })]


<div class="notifications">
    <label>Title:</label>
    <input type="text" @bind-value="this._title" />

    <label>Message:</label>
    <input type="text" @bind-value="this._message" />
    <IconButton FAClass="comment" OnClick="this.Alert" />
</div>

<Battery BatteryLevel="this.battery.BatteryLevel" Charging="this.battery.Charging" FullLevel="95" LowLevel="15" />

@code
{
    private string _title;
    private string _message;

    protected override async Task OnInitializedAsync()
    {
        this.notificationService.NotificationReceived += this.NotificationReceived;
        this.battery.InfoChanged += this.InfoChanged;
        await base.OnInitializedAsync();
    }

    private async Task Alert()
    {
        this.notificationService.SendNotification(this._title, this._message);
    }

    private async void NotificationReceived(object sender, NotificationEventArgs e)
    {
        await this.modal.ShowDialog(e.Message, chd.UI.Base.Contracts.Enum.EDialogButtons.OK);
    }

    private async void InfoChanged(object sender, EventArgs e)
    {
        await this.InvokeAsync(this.StateHasChanged);
    }

    public void Dispose()
    {
        this.battery.InfoChanged -= this.InfoChanged;
        this.notificationService.NotificationReceived -= this.NotificationReceived;
    }
}